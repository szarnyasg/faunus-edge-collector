//Faunus load sequence
//====================

hostname = "localhost";

graphSonFilename = "testBig_User_16.faunus-graphson";
loadProperties = "cassandra-load.properties";

conf = new BaseConfiguration();
conf.setProperty("storage.hostname", hostname);
conf.setProperty("storage.backend", "cassandra");
g = TitanFactory.open(conf);

g.makeType().name("ROUTE_ENTRY").makeEdgeLabel();
g.makeType().name("ROUTE_EXIT").makeEdgeLabel();
g.makeType().name("ROUTE_ROUTEDEFINITION").makeEdgeLabel();
g.makeType().name("ROUTE_SWITCHPOSITION").makeEdgeLabel();
g.makeType().name("TRACKELEMENT_SENSOR").makeEdgeLabel();
g.makeType().name("TRACKELEMENT_CONNECTSTO").makeEdgeLabel();
g.makeType().name("SWITCHPOSITION_SWITCH").makeEdgeLabel();

g.makeType().name("idx").dataType(Integer.class).unique(OUT).makePropertyKey();
g.makeType().name("name").dataType(String.class).unique(OUT).makePropertyKey();
g.makeType().name("Segment_length").dataType(Integer.class).unique(OUT).makePropertyKey();
g.makeType().name("Signal_actualState").dataType(String.class).unique(OUT).makePropertyKey();
g.makeType().name("Switch_actualState").dataType(Integer.class).unique(OUT).makePropertyKey();
g.makeType().name("SwitchPosition_switchState").dataType(Integer.class).unique(OUT).makePropertyKey();
g.makeType().name("type").dataType(String.class).indexed(Vertex.class).unique(OUT).makePropertyKey();

g.stopTransaction(SUCCESS);

hdfs.ls();
hdfs.copyFromLocal("hdfs/" + graphSonFilename, graphSonFilename);
faunusConf = new Configuration();
faunusConf.setStrings("faunus.graph.input.format", "com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat");
faunusConf.setStrings("faunus.input.location", graphSonFilename);
faunusConf.setStrings("faunus.graph.output.titan.storage.hostname", hostname);
g = FaunusFactory.open(loadProperties, faunusConf);
g._;

groovyFilename = "EdgeTypes.groovy"
queryProperties = "cassandra-query.properties";

g = FaunusFactory.open(queryProperties);
hdfs.copyFromLocal("hdfs/" + groovyFilename, groovyFilename);
g.V.script("EdgeTypes.groovy", "cassandra");
